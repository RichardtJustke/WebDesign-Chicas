// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  phone        String?
  passwordHash String
  createdAt    DateTime @default(now())

  accounts Account[]
  sessions Session[]
  events   Event[]
  orders   Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id          String   @id @default(cuid())
  userId      String
  title       String
  date        DateTime
  timeStart   String
  timeEnd     String
  location    String
  description String?
  status      EventStatus @default(DRAFT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventItems EventItem[]
  orders     Order[]
}

model EventItem {
  id        String  @id @default(cuid())
  eventId   String
  name      String
  category  String
  qty       Int
  unitPrice Decimal @db.Decimal(10, 2)
  notes     String?
  subtotal  Decimal @db.Decimal(10, 2) // Calculado: qty * unitPrice

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_items")
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  eventId       String
  total         Decimal     @db.Decimal(10, 2)
  currency      String      @default("BRL")
  status        OrderStatus @default(PENDING)
  paymentMethod String?
  createdAt     DateTime    @default(now())
  paidAt        DateTime?
  pdfUrl        String?

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("orders")
}

enum EventStatus {
  DRAFT
  SUBMITTED
  CONFIRMED
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
}



